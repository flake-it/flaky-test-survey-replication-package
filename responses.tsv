Timestamp	We are trying to better understand flaky tests and we would love your input.  Filling out this short questionnaire can help us gain a much better understanding of flaky tests and the challenges they present. Your responses to this questionnaire will be used as part of a research project, as explained in the Participant Information Sheet (https://docs.google.com/document/d/1ShwU1k1v3ZK7tft2ysszmzO0Bj8yY5jcLtkAGB_-808). Unless you choose to provide your email address, no personal information will be collected and your responses will be anonymous. Where there are open-ended questions, your words may be quoted in publications and other research outputs. Your responses will be made publicly available, with the exception of your email address if you choose to provide it, as part of an aggregated data set from the responses of all participants. You are free to withdraw from this study at any time by closing this questionnaire before you submit, or if you have already submitted, by contacting us (contact details are available in the Participant Information Sheet). Please indicate that you consent to these conditions. If you do not consent, please do not proceed with the questionnaire.	A flaky test is a test case that can both pass and fail without any changes to the code under test. Do you agree with this definition?	If you answered "No, I do not agree" to the previous question, please give your own definition of a flaky test.	How often do you observe flaky tests in the projects you’re currently working on?	To what extent do you agree with the following statements: [Flaky tests reduce the reliability of testing.]	To what extent do you agree with the following statements: [Flaky tests reduce the efficiency of testing.]	To what extent do you agree with the following statements: [Flaky tests lead to a loss of productivity.]	To what extent do you agree with the following statements: [Flaky tests lead to a loss of confidence in testing.]	To what extent do you agree with the following statements: [Flaky tests hinder continuous integration.]	To what extent do you agree with the following statements: [Flaky tests make it more likely for you to ignore (potentially genuine) test failures.]	To what extent do you agree with the following statements: [It is difficult to reproduce a flaky test failure.]	To what extent do you agree with the following statements: [It is difficult to differentiate between a test failure due to a genuine bug and a test failure due to flakiness.]	In the projects you’re currently working on, how often have you encountered flaky tests caused by... [Not correctly waiting for the results of asynchronous calls to become available.]	In the projects you’re currently working on, how often have you encountered flaky tests caused by... [Synchronization issues between multiple threads interacting in an unsafe or unanticipated manner (e.g., data races, atomicity violations, deadlocks).]	In the projects you’re currently working on, how often have you encountered flaky tests caused by... [Tests not properly cleaning up after themselves or failing to set up their necessary preconditions.]	In the projects you’re currently working on, how often have you encountered flaky tests caused by... [Improper management of resources (e.g., not closing a file or not deallocating memory).]	In the projects you’re currently working on, how often have you encountered flaky tests caused by... [Dependency on a network connection.]	In the projects you’re currently working on, how often have you encountered flaky tests caused by... [Not accounting for all the possible outcomes of random data generators or code that uses them.]	In the projects you’re currently working on, how often have you encountered flaky tests caused by... [Reliance on the local system time/date.]	In the projects you’re currently working on, how often have you encountered flaky tests caused by... [Inaccuracies when performing floating point operations.]	In the projects you’re currently working on, how often have you encountered flaky tests caused by... [Assuming a particular iteration order for an unordered collection-type object (e.g., sets).]	In the projects you’re currently working on, how often have you encountered flaky tests caused by... [Reasons that cannot be precisely determined.]	Have you encountered any other causes of flaky tests that we have not described above?	After identifying a flaky test, how often do you… [Take no action.]	After identifying a flaky test, how often do you… [Re-run the build.]	After identifying a flaky test, how often do you… [Document and defer (e.g., submit an issue/bug report).]	After identifying a flaky test, how often do you… [Delete the test.]	After identifying a flaky test, how often do you… [Quarantine the test.]	After identifying a flaky test, how often do you… [Mark the test to be skipped or as an expected failure (e.g., xfail).]	After identifying a flaky test, how often do you… [Mark the test to be automatically repeated (e.g., by using the flaky plugin for pytest).]	After identifying a flaky test, how often do you… [Attempt to repair the flakiness.]	Are there any other actions that you would take that we have not listed above?	Which languages are you currently developing in?	How many years experience do you have in commercial and/or open-source software development?	Thanks for taking part, is there anything else that you would like to tell us about flaky tests?	If you would like to be notified of the results of this study, please leave us your email (optional).
6/30/2021 17:35:10	Yes, I consent.	Yes, I agree		A few times a year	Agree	Strongly agree	Strongly agree	Agree	Strongly agree	Strongly disagree	Agree	Strongly agree	Never	Never	Rarely	Never	Sometimes	Rarely	Often	Never	Sometimes	Sometimes	Parallel builds of different branches of the same project sometimes interfering with each other 	Sometimes	Often	Rarely	Never	Never	Never	Never	Sometimes		JavaScript, PHP	9 - 12		
6/30/2021 17:46:55	Yes, I consent.	Yes, I agree		Daily	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Sometimes	Sometimes	Sometimes	Sometimes		Rarely	Sometimes	Rarely	Rarely	Sometimes		Often	Often	Sometimes	Sometimes	Sometimes	Rarely	Never	Often		JavaScript, TypeScript, Go	2 - 4		
6/30/2021 17:54:54	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Rarely	Sometimes	Rarely	Never	Rarely	Never	Never	Never	Never	Rarely	Relying on integrated tests where the integrated system produces different responses when called - rarely. And relying on deteriorated test data - rarely.	Never	Sometimes	Rarely	Rarely	Never	Never	Never	Often		JavaScript, Java, TypeScript, Kotlin	5 - 8	We always attempt to fix flaky tests to make them reliable, because the original intent for the test was to provide valuable clarification as to whether something was working or not. Only on rare occasions do we defer a fix due to time constraints on bug fixing, or we delete it because the flaky test provides little to no added value for the trouble it causes.  However, the biggest problematic consequence we face due to flaky tests is not Continuous Integration or mischievous builds (though they are big issues), but in Developer Confidence. If builds repeatedly fail for flaky reasons and we get used to that, then this (often combined with other factors) leads to a loss of confidence in the reliability and robustness of our tests, which unfortunately tends to lead to an increase in manual testing and other bad testing practices in an attempt to regain our confidence in the code we write, which just causes further problems and the spiral continues. And where Developer Confidence does affect productivity, it also increases workloads, causes stress & anxiety and ultimately the enjoyment of development work.  Since a sustainable, enjoyable work ethic is vital to every organisation, spending 5-10 minutes fixing a flaky test when we spot one, is worth that effort to prevent us ending up in a distressing work environment.	
6/30/2021 19:26:48	Yes, I consent.	Yes, I agree		Weekly	Agree	Agree	Agree	Disagree	Strongly agree	Agree	Agree	Disagree	Rarely	Sometimes	Often	Never	Never	Rarely	Sometimes	Never	Rarely	Never		Rarely	Often	Sometimes	Rarely	Never	Rarely	Never	Rarely		Java, Go	2 - 4		
6/30/2021 19:32:09	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Agree	Agree	Agree	Strongly agree	Agree	Agree	Agree	Sometimes	Rarely	Sometimes	Sometimes	Never	Rarely	Never	Never	Never	Never		Never	Sometimes	Rarely	Rarely	Never	Never	Never	Sometimes		JavaScript	9 - 12		
6/30/2021 19:37:53	Yes, I consent.	Yes, I agree		A few times a year	Agree	Strongly agree	Agree	Disagree	Strongly agree	Strongly disagree	Disagree	Disagree	Never	Never	Sometimes	Rarely	Never	Never	Rarely	Never	Sometimes	Never		Never	Often	Never	Never	Rarely	Rarely	Never	Often		JavaScript, Python, Java, Go, Kotlin, bash	13 +		
6/30/2021 19:46:50	Yes, I consent.	Yes, I agree		Monthly	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Sometimes	Rarely	Sometimes	Rarely	Sometimes	Sometimes	Often	Never	Sometimes	Rarely	Changes to other services in a microservice architecture	Never	Sometimes	Never	Rarely	Rarely	Rarely	Never	Often	Split test suite up. Reorder tests to fail faster	JavaScript, Scala	5 - 8	Library support for automatically handling them in Scala is poor or not well popularised.	
6/30/2021 20:12:15	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Agree	Sometimes	Sometimes	Often	Rarely	Rarely	Never	Rarely	Never	Rarely	Rarely	- Third party artifacts, services, or dependencies (e.g., npm package, test harness which depends on a third party service, etc.) which you do not have full control of. - Assuming a specific initial state, where the state can be modified globally -- more concretely: implicit dependency on global state. This can be as simple as static variables, a large distributed data store, or even something like a shared ML model.	Sometimes	Often	Sometimes	Sometimes	Sometimes	Often	Never	Sometimes	When the test depends on the global state (e.g., a shared resource like a database), sometimes the flakiness is caused by incorrect initial state in that resource. And the test needs to be neither deleted/skipped, nor repaired, but rather, the state of the resource needs to be repaired. Of course, it goes without saying that the shared global state is a bad practice that sooner or later leads to flaky tests.	JavaScript, Java, TypeScript, Go	13 +		
6/30/2021 21:13:23	Yes, I consent.	Yes, I agree		Daily	Strongly agree	Strongly agree	Strongly agree	Disagree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Often	Rarely	Rarely	Sometimes	Rarely	Rarely	Never	Never	Never	Rarely		Sometimes	Often	Often	Never	Rarely	Sometimes	Sometimes	Rarely		C#	2 - 4		
6/30/2021 21:46:44	Yes, I consent.	Yes, I agree		A few times a year	Agree	Agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Sometimes	Rarely	Sometimes	Rarely	Sometimes	Never	Sometimes	Never	Sometimes	Sometimes		Never	Often	Never	Sometimes	Never	Sometimes	Never	Often		Java	13 +		
6/30/2021 21:46:46	Yes, I consent.	No, I do not agree		Never	Agree	Agree	Agree	Agree	Agree	Agree	Agree	Agree	Sometimes	Sometimes	Rarely	Sometimes	Sometimes	Sometimes	Sometimes	Rarely	Rarely	Rarely											Java	5 - 8		
6/30/2021 22:02:58	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Agree	Agree	Strongly disagree	Disagree	Strongly disagree	Agree	Agree	Never	Never	Sometimes	Sometimes	Never	Sometimes	Sometimes	Sometimes	Sometimes	Sometimes		Never	Often	Often	Rarely	Sometimes	Rarely	Rarely	Often		Python, Java	5 - 8		
6/30/2021 23:57:02	Yes, I consent.	Yes, I agree		Monthly	Agree	Strongly agree	Strongly agree	Agree	Strongly agree	Strongly agree	Strongly agree	Agree	Never	Rarely	Often	Never	Sometimes	Never	Sometimes	Never	Never	Never		Never	Often	Sometimes	Never	Never	Sometimes	Never	Sometimes	There is a project where previous team members removed the tests from running whatsoever when the project builds on the Jenkins server because of flaky tests 	Java	2 - 4	N/A	
7/1/2021 10:25:18	Yes, I consent.	Yes, I agree		Monthly	Agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Agree	Sometimes	Rarely	Often	Rarely	Sometimes	Rarely	Sometimes	Rarely	Rarely	Sometimes		Rarely	Often	Sometimes	Sometimes	Sometimes	Rarely	Rarely	Often		JavaScript, Python, TypeScript	13 +		
7/1/2021 10:36:36	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Often	Never	Sometimes	Never	Rarely	Never	Rarely	Never	Never	Never		Often	Sometimes	Never	Rarely	Sometimes	Sometimes	Sometimes	Rarely		JavaScript, Python, Java	13 +		
7/1/2021 10:42:26	Yes, I consent.	Yes, I agree		Weekly	Disagree	Agree	Agree	Disagree	Agree	Agree	Agree	Disagree	Sometimes	Rarely	Sometimes	Rarely	Rarely	Never	Rarely	Rarely	Never	Rarely		Rarely	Often	Never	Rarely	Rarely	Never	Never	Sometimes		JavaScript, Python	2 - 4		
7/1/2021 11:05:09	Yes, I consent.	Yes, I agree		A few times a year	Agree	Agree	Strongly agree	Strongly agree	Agree	Strongly agree	Agree	Agree	Often	Sometimes	Sometimes	Often	Often	Often	Sometimes	Often	Sometimes	Often		Rarely	Often	Sometimes	Sometimes	Often	Sometimes	Sometimes	Often		Python, C#, C++, C, Swift, Objective-C, Perl	2 - 4		
7/1/2021 11:21:32	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Strongly agree	Agree	Sometimes	Never	Rarely	Never	Rarely	Never	Sometimes	Rarely	Never	Rarely		Rarely	Often	Rarely	Rarely	Sometimes	Rarely	Rarely	Sometimes		JavaScript, Python, Ruby	0 - 1		
7/1/2021 11:46:48	Yes, I consent.	Yes, I agree		Never	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Disagree	Agree	Sometimes	Never	Sometimes	Rarely	Rarely	Never	Sometimes	Never	Never	Never										Timeouts, differences between execution environments, 	JavaScript, Java, C#, TypeScript	13 +	Flaky production code can be misdiagnosed as flaky tests. Having flaky tests is not inevitable. 	
7/1/2021 12:42:16	Yes, I consent.	Yes, I agree		Monthly	Agree	Disagree	Strongly agree	Strongly agree	Agree	Agree	Agree	Agree	Never	Never	Rarely	Never	Never	Sometimes	Never	Rarely	Never	Never	nope	Often	Often	Sometimes	Rarely	Rarely	Rarely	Never	Often		C#	13 +		
7/1/2021 13:03:24	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Disagree	Never	Never	Sometimes	Rarely	Rarely	Rarely	Sometimes	Sometimes	Rarely	Rarely	Environmental differences in local vs ci like different JVM defaults	Never	Never	Never	Sometimes	Rarely	Rarely	Never	Often		JavaScript, Python, Java	13 +		
7/1/2021 13:25:07	Yes, I consent.	Yes, I agree		Never	Disagree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Disagree	Never	Rarely	Rarely	Sometimes	Sometimes	Never	Sometimes	Sometimes	Rarely	Sometimes	Changes in external systems they rely upon. Or external system down.	Rarely	Often	Sometimes	Rarely	Never	Rarely	Never	Often		Java, Gosu (a close relative of Java)	13 +	There are also environment specific failures: My machine vs the integration machine.	
7/1/2021 14:32:29	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Disagree	Disagree	Agree	Rarely	Rarely	Rarely	Rarely	Sometimes	Rarely	Never	Never	Never	Never	Failing downstream services, database failovers, external API integrations. 	Sometimes	Often	Sometimes	Never	Never	Rarely	Never	Often		JavaScript	5 - 8		
7/1/2021 14:34:03	Yes, I consent.	No, I do not agree	Bit more detail such as over time and dependent on data https://docs.gitlab.com/ee/development/testing_guide/flaky_tests.html 	A few times a year	Agree	Agree	Agree	Agree	Agree	Agree	Agree	Agree	Sometimes	Sometimes	Sometimes	Sometimes	Sometimes	Sometimes	Sometimes	Sometimes	Sometimes	Sometimes		Never	Rarely	Often	Rarely	Rarely	Never	Often	Often		C#, C++, C	5 - 8		
7/1/2021 14:35:08	Yes, I consent.	No, I do not agree	I define a "flaky test" as "a nondeterministic, automated check." It doesn't matter if the test is "passing" or "failing". It matters if it's in control of the initial state/input of the underlying system, and whether or not the underlying system (i.e. both the check itself, and what it's checking) is going through the same series of states, while controlling for race conditions. "Flaky" checks, are inherently nondeterministic.  I find "flaky" is used as a term so that blame can be placed on the check itself, or the tools used. But the reality, is that it always means nondeterministic code was written. Sometimes that can be good, but often it's not valued.	A few times a year	Strongly agree	Strongly agree		Strongly agree	Strongly agree	Strongly disagree	Strongly disagree	Strongly disagree	Rarely	Rarely	Rarely	Rarely	Rarely	Rarely	Rarely	Rarely	Rarely	Rarely	With Machine Learning, it can be inherently nondeterministic, which makes coming up with deterministic automated checks impossible by definition.	Never	Rarely	Never	Sometimes	Never	Never	Never	Often		JavaScript, Python, TypeScript	5 - 8	Even if a test fails intermittently with seemingly nothing changing, that's still a result. It at least tells us there's something to learn about the system.	
7/1/2021 16:02:04	Yes, I consent.	Yes, I agree		Daily	Agree	Disagree	Strongly agree	Agree	Agree	Strongly agree	Disagree	Agree	Rarely	Sometimes	Sometimes	Never	Rarely	Never	Never	Never	Never	Sometimes	Differences between local development machines and machines running the tests (e.g. TeamCity agent machine running on different OS, different memory constraints etc.)  Occasionally we have seen failures caused by improper set up of test frameworks (our business frequently practices behavioural tests over lower-level unit tests, meaning that our tests have much more complex initialisers than standard unit tests, which we have sometimes got wrong)	Sometimes	Sometimes	Rarely	Never	Rarely	Never	Rarely	Sometimes		Java, Kotlin	2 - 4		
7/1/2021 16:33:50	Yes, I consent.	No, I do not agree	A flaky test is a test case that can both pass and fail depending on changes irrelevant to the code being tested.	A few times a year	Strongly agree	Strongly agree	Agree	Strongly agree	Strongly agree	Agree	Agree	Strongly agree	Sometimes	Never	Sometimes	Often	Rarely	Never	Never	Often	Never	Often	Tests that run in multiple environments being misconfigured in certain environments.	Sometimes	Often	Often	Never	Never	Never	Often	Sometimes		JavaScript, Python, TypeScript	2 - 4		
7/1/2021 16:35:33	Yes, I consent.	Yes, I agree		A few times a year	Agree	Agree	Agree	Disagree	Agree	Disagree	Disagree	Disagree	Never	Never	Never	Never	Never	Never	Sometimes	Never	Never	Never	Out of memory errors. DB table space issues for heavy tests. 	Never	Sometimes	Sometimes	Sometimes	Never	Sometimes	Never	Often		JavaScript, Java, TypeScript	13 +	90% of the time it's date and or timezone logic. Sometimes they will fail when DST changes 	
7/1/2021 16:37:37	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Strongly agree	Agree	Strongly agree	Agree	Strongly agree	Disagree		Sometimes											Often				Sometimes				Python, C++, C	2 - 4		
7/1/2021 16:55:41	Yes, I consent.	Yes, I agree		Daily	Strongly agree	Strongly agree	Agree	Disagree	Strongly agree	Agree	Agree	Strongly disagree	Often	Rarely	Sometimes	Sometimes	Often	Sometimes	Rarely	Never	Often	Often	Bugs that only intermittently happen.	Often	Often	Sometimes	Rarely	Never	Never	Never	Sometimes		C, Racket	13 +		
7/1/2021 17:00:16	Yes, I consent.	Yes, I agree		Weekly	Agree	Strongly agree	Strongly agree	Agree	Strongly agree	Agree	Disagree	Disagree	Never	Rarely	Never	Never	Often	Often	Never	Never	Never	Never		Sometimes	Often	Rarely	Never	Rarely	Never	Never	Sometimes		Java	13 +	Recently, seen a lot of flaky tests when running CI on Azure due to failures to download libraries; their Internet connection seems surprisingly flaky.  The other main cause is property-based testing where occasional random outputs produce a test failure but it's such a corner case it's not necessarily worth fixing properly.	
7/1/2021 17:08:19	Yes, I consent.	Yes, I agree		A few times a year	Agree	Disagree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Sometimes	Never	Sometimes	Rarely	Rarely	Never	Never	Never	Rarely	Never	Tests that pass on local machines fail, error, or falsely pass on CI machines with different platforms/environments	Never	Often	Sometimes	Sometimes	Never	Sometimes	Never	Often		JavaScript, Python, R	5 - 8		
7/1/2021 17:13:28	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree		Strongly agree	Agree	Strongly agree	Strongly agree	Strongly agree	Rarely	Sometimes	Sometimes	Rarely	Rarely	Rarely	Sometimes	Sometimes	Rarely	Rarely		Sometimes	Often	Often	Rarely	Rarely	Often	Rarely	Sometimes		Python, Java, Kotlin	13 +		
7/1/2021 17:20:24	Yes, I consent.	Yes, I agree		Daily	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Strongly agree	Sometimes	Rarely	Sometimes	Rarely	Often	Never	Never	Never	Never	Rarely		Never	Rarely	Rarely	Often	Never	Never	Never	Often	Get very angry	Python, Java, Rust, C#	13 +	Flakey tests must be eradicated 	
7/1/2021 18:05:36	Yes, I consent.	Yes, I agree		Monthly	Agree	Strongly agree	Agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Sometimes	Rarely	Rarely	Never	Sometimes	Often	Rarely	Often	Rarely	Rarely		Sometimes	Often	Never	Sometimes	Never	Never	Never	Often		Python, Java, Scala	2 - 4	It is unclear what quarantining a test is and very difficult to search.	
7/1/2021 18:06:05	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Disagree	Agree	Strongly agree	Strongly agree	Agree	Strongly agree	Strongly agree	Often	Sometimes	Often	Sometimes	Rarely	Rarely	Rarely	Never	Never	Rarely	Idiosyncrasies from differences in operating systems that run the test (i.e. under MacOS/Linux a file is considered hidden if it becomes with .*, but Windows requires a system flag to also be set for that file, and some test harnesses try to obfuscate the OS running the tests).	Rarely	Often	Sometimes	Never	Sometimes	Sometimes	Rarely	Often		JavaScript, Python, TypeScript	9 - 12		
7/1/2021 18:12:58	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Agree	Agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Sometimes	Never	Never	Never	Sometimes	Never	Rarely	Never	Never	Sometimes		Rarely	Often	Sometimes	Never	Never	Never	Never	Sometimes		JavaScript, C#, TypeScript	9 - 12		
7/1/2021 18:29:31	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Sometimes	Often	Often	Often	Often	Never	Never	Never	Never	Often		Never	Often	Often	Never	Never	Never	Often	Sometimes		Python, C++	5 - 8		
7/1/2021 18:49:43	Yes, I consent.	Yes, I agree		Weekly	Disagree	Agree	Agree	Agree	Strongly agree	Strongly agree	Agree	Agree											In the projects I'm currently working on, I don't have visibility into the causes of flaky tests. That's not my department. I've skipped that question for that reason. 	Rarely	Often	Sometimes	Sometimes	Sometimes	Sometimes	Never	Sometimes	Attempt to diagnose the importance of the flakiness to the overall behavior. 	Python, C++	2 - 4		
7/1/2021 19:33:52	Yes, I consent.	Yes, I agree		A few times a year	Agree	Agree	Agree	Disagree	Strongly agree	Strongly disagree	Agree	Disagree	Rarely	Rarely	Rarely	Rarely	Never	Never	Often	Sometimes	Rarely	Never	Time zones	Never	Sometimes	Sometimes	Never	Never	Never	Never	Often		TypeScript, Go, Ruby	2 - 4		
7/1/2021 19:40:20	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Agree	Strongly agree	Disagree	Disagree	Agree	Agree	Agree	Rarely	Sometimes	Often	Sometimes	Rarely	Sometimes	Never	Never	Rarely	Sometimes		Rarely	Often	Sometimes	Sometimes	Often	Sometimes	Sometimes	Often		JavaScript, Python	2 - 4		
7/1/2021 19:50:58	Yes, I consent.	Yes, I agree		Daily	Agree	Agree	Agree	Strongly agree	Agree	Strongly agree	Disagree	Disagree	Often	Sometimes	Rarely	Never	Often	Never	Never	Never	Never	Sometimes		Sometimes	Often	Often	Never	Rarely	Sometimes	Sometimes	Rarely		Java, Go, Scala	9 - 12		
7/1/2021 19:54:30	Yes, I consent.	Yes, I agree		Weekly	Agree	Strongly agree	Strongly agree	Agree	Agree	Agree	Disagree	Disagree	Sometimes	Never	Sometimes	Rarely	Sometimes	Rarely	Never	Never	Never	Never		Rarely	Often	Rarely	Rarely	Sometimes	Never	Often	Often		Python, Go	9 - 12		
7/1/2021 20:13:40	Yes, I consent.	Yes, I agree		A few times a year	Disagree	Agree	Agree	Disagree	Agree	Agree	Disagree	Strongly disagree	Never	Sometimes	Often	Sometimes	Often	Never	Sometimes	Often	Rarely	Never	Test runner machine failure, which at some scale means all tests are a little flaky	Sometimes	Often	Never	Sometimes	Sometimes	Rarely	Never	Often		JavaScript, Python, C++, Rust	13 +		
7/1/2021 20:33:40	Yes, I consent.	Yes, I agree		Monthly	Agree	Agree	Agree	Agree	Agree	Agree	Agree	Agree	Rarely	Never	Often	Sometimes	Sometimes	Sometimes	Never	Sometimes	Rarely	Sometimes	No	Sometimes	Often	Sometimes	Often	Rarely	Sometimes	Rarely	Sometimes	No	Python, Java	0 - 1		
7/1/2021 22:02:22	Yes, I consent.	Yes, I agree		Weekly	Agree	Agree	Strongly agree	Agree	Agree	Disagree	Agree	Strongly disagree	Never	Never	Often	Often	Sometimes	Rarely	Never	Never	Rarely	Rarely	Occasionally we run into more general system issues beyond just the network that plague our test system. These can be due to authentication issues (API key), storage issues, file locks on a resource, etc.	Sometimes	Often	Rarely	Rarely	Rarely	Sometimes	Sometimes	Sometimes		JavaScript, Python, C#	5 - 8		
7/1/2021 22:12:45	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Strongly agree	Disagree	Agree	Agree	Agree	Disagree	Rarely	Sometimes	Sometimes	Never	Often	Never	Never	Never	Never	Often		Sometimes	Often	Often	Never	Never	Never	Sometimes	Often		Python	13 +		
7/2/2021 0:08:52	Yes, I consent.	Yes, I agree		Weekly	Agree	Strongly agree	Agree	Disagree	Strongly agree	Strongly agree	Strongly agree	Disagree	Rarely	Sometimes	Sometimes	Never	Never	Rarely	Often	Never	Sometimes	Rarely	In my code that tests database interactions, I've run into issues where my coding language has more time precision than my storage, leading to timestamps changing when a record is reloaded vs. initialized. This is a huge pain. Date math is also fun (tests that only fall during February, for example).	Sometimes	Often	Sometimes	Never	Never	Rarely	Never	Often		JavaScript, Ruby	5 - 8	They're so darn easy to write and hard to reproduce!!	
7/2/2021 0:55:16	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Sometimes	Rarely	Often	Rarely	Often	Rarely	Often	Rarely	Never	Never	unrelated system load on a shared resource causing low level timeouts	Rarely	Sometimes	Rarely	Sometimes	Rarely	Rarely	Never	Often		JavaScript, Python, PHP	13 +		
7/2/2021 3:37:46	Yes, I consent.	Yes, I agree		A few times a year	Agree	Agree	Agree	Disagree	Agree	Disagree	Strongly agree	Strongly agree	Rarely	Rarely	Often	Often	Sometimes	Sometimes	Never	Sometimes	Rarely	Sometimes		Rarely	Sometimes	Rarely	Never	Never	Sometimes	Never	Often	Mock out the concurrency 	Python, Java	13 +		
7/2/2021 8:53:44	Yes, I consent.	Yes, I agree		Weekly	Agree	Strongly agree	Strongly agree	Agree	Strongly agree	Strongly agree	Agree	Agree	Often	Often	Rarely	Rarely	Never	Never	Never	Never	Never	Sometimes		Rarely	Often	Never	Never	Never	Rarely	Never	Sometimes		C#	0 - 1		
7/2/2021 8:55:59	Yes, I consent.	Yes, I agree		A few times a year	Agree	Agree	Agree	Disagree	Agree	Agree	Agree	Disagree	Never	Sometimes	Never	Never	Never	Never	Never	Never	Never	Rarely	The automation of virtual machines is asking for trouble	Rarely	Often	Never	Rarely	Never	Never	Never	Rarely	Tell the person who maintains that codebase	C#	9 - 12	If a test uses 'Thread.Sleep(100)` or similar, then the dev should be trashed that many times.	
7/2/2021 8:56:50	Yes, I consent.	Yes, I agree		A few times a year	Agree	Agree	Disagree	Agree	Agree	Disagree	Strongly agree	Agree	Rarely	Rarely	Rarely	Never	Never	Never	Never	Never	Never	Sometimes		Never	Often	Sometimes	Rarely	Never	Never	Sometimes	Often		C#, TypeScript	2 - 4		
7/2/2021 8:57:41	Yes, I consent.	Yes, I agree		Weekly	Agree	Agree	Disagree	Agree	Agree	Strongly agree	Agree	Agree	Rarely	Never	Rarely	Never	Rarely	Never	Never	Never	Never	Sometimes	Running on different machines yielding different results due to differences in environment setup. 	Never	Often	Rarely	Never	Never	Never	Often	Rarely		JavaScript, C#, TypeScript	9 - 12		
7/2/2021 8:59:15	Yes, I consent.	No, I do not agree	A flaky test is a test case that can both pass and fail without any changes to the code under test "given consistent or expected inputs". (The given definition also fits quite well with "fuzz testign" or "fuzzing", where the input is deliverately variable to find unexpected issues.)	Weekly	Strongly agree	Strongly agree	Strongly agree	Agree	Strongly agree	Strongly agree	Agree	Strongly agree	Often	Rarely	Sometimes	Rarely	Sometimes	Never	Rarely	Never	Rarely	Never	(This may be a subset of "Not correctly waiting for the results of asynchronous calls to become available.") Attempting to automate a poorly-accessable User Interface, attempting to interact with an interface that isn't in an interactable state.	Never	Sometimes	Rarely	Often	Rarely	Rarely	Sometimes	Often		JavaScript, Python, C#, TypeScript, Ruby	2 - 4		
7/2/2021 9:00:02	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Agree	Agree	Agree	Strongly agree	Strongly agree	Strongly agree	Agree	Rarely	Rarely	Sometimes	Rarely	Often	Rarely	Rarely	Never	Never	Sometimes		Sometimes	Often	Rarely	Sometimes	Sometimes	Sometimes	Rarely	Sometimes		JavaScript, C#	13 +		
7/2/2021 9:03:33	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Agree	Agree	Agree	Agree	Agree	Disagree	Disagree	Rarely	Often	Rarely	Rarely	Sometimes	Rarely	Rarely	Never	Never	Rarely		Rarely	Often	Sometimes	Sometimes	Sometimes	Sometimes	Never	Often		JavaScript, C#	9 - 12		
7/2/2021 9:12:08	Yes, I consent.	No, I do not agree	A flaky test is one that exhibits different behaviour with no code changes. This includes pass/fail, but can encompass other aspects such as coverage or test time.	A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Disagree	Disagree	Strongly agree	Never	Never	Rarely	Rarely	Often	Never	Rarely	Never	Never	Sometimes		Rarely	Often	Rarely	Sometimes	Never	Rarely	Never	Rarely		C#, TypeScript, Go	5 - 8		
7/2/2021 9:12:19	Yes, I consent.	Yes, I agree		A few times a year	Agree	Agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Rarely	Sometimes	Sometimes	Rarely	Rarely	Rarely	Never	Never	Never	Often		Rarely	Often	Sometimes	Rarely	Rarely	Never	Never	Often		JavaScript, C#	13 +		
7/2/2021 9:16:56	Yes, I consent.	Yes, I agree		Weekly	Agree	Strongly agree	Strongly agree	Agree	Strongly agree	Agree	Agree	Disagree	Rarely	Rarely	Often	Never	Sometimes	Never	Never	Rarely	Never	Sometimes	Had a couple of cases where a test killed the process running the tests part way through a run.	Rarely	Sometimes	Never	Rarely	Never	Never	Often	Sometimes		C#, TypeScript	9 - 12		
7/2/2021 9:17:18	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Strongly agree	Strongly agree	Rarely	Never	Often	Never	Never	Never	Rarely	Never	Never	Sometimes		Rarely	Often	Sometimes	Rarely	Never	Never	Never	Often		JavaScript, Python, TypeScript	5 - 8		
7/2/2021 9:31:00	Yes, I consent.	No, I do not agree	I do agree but, not all tests are deterministic 	A few times a year	Strongly agree	Strongly agree	Agree	Disagree	Strongly agree	Agree	Agree	Agree	Sometimes	Rarely	Rarely	Rarely	Never	Often	Never	Never	Rarely	Rarely	UI changes with new OS. Things like EggPlant, that uses graphics. Moving to  a new version of Windows (I think), changed the battleship grey ever so slightly and failed our UI tests	Rarely	Often	Rarely	Sometimes	Sometimes	Rarely	Sometimes	Sometimes		JavaScript, C#	13 +		
7/2/2021 9:42:55	Yes, I consent.	Yes, I agree		Daily	Disagree	Strongly agree	Agree	Strongly disagree	Agree	Strongly disagree	Strongly agree	Disagree	Never	Never	Never	Never	Never	Never	Never	Never	Never	Sometimes	Our primary problem is a random error in a third party component (which can't be mocked, it's like a container for our code) where we're testing integration with them. The error is well known to us now and can be ignored when it happens - if the test fails for a different error, we investigate.	Never	Often	Never	Rarely	Never	Never	Often	Often		Java	13 +		
7/2/2021 9:44:05	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Agree	Agree	Strongly agree	Strongly agree	Strongly agree	Agree	Disagree	Sometimes	Sometimes	Sometimes	Rarely	Often	Never	Never	Rarely	Rarely	Sometimes	Dependence on external infrastructure (e.g. file shares, database servers) that change independently of the test, or that sometimes go offline.	Rarely	Often	Rarely	Rarely	Never	Never	Rarely	Sometimes		C#, TypeScript	13 +	Most of the flaky tests that we have are legacy tests that we have inherited from many years ago. They are testing important stuff, but in a way that leads to flakyness. We haven't got the time to address them all.	
7/2/2021 9:44:58	Yes, I consent.	Yes, I agree		Daily	Agree	Strongly agree	Strongly agree	Agree	Agree	Agree	Agree	Disagree	Never	Sometimes	Often	Sometimes	Often	Rarely	Rarely	Rarely	Rarely	Sometimes	Infrastructure problems in complex setup of virtual environments (e.g. vagrant)	Sometimes	Often	Sometimes	Sometimes	Never	Never	Sometimes	Sometimes		JavaScript, C#, TypeScript, PowerShell	13 +		
7/2/2021 10:11:04	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Strongly agree	Disagree	Sometimes	Rarely	Rarely	Never	Often	Never	Rarely	Never	Never	Sometimes		Rarely	Often	Never	Rarely	Never	Never	Sometimes	Sometimes		JavaScript, C#, TypeScript	13 +		
7/2/2021 10:47:56	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Sometimes	Often	Often	Sometimes	Often	Rarely	Rarely	Rarely	Sometimes	Sometimes		Sometimes	Often	Rarely	Sometimes	Rarely	Rarely	Sometimes	Often		C#	13 +		
7/2/2021 12:38:36	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Sometimes	Sometimes	Often	Never	Never	Never	Never	Never	Never	Never		Often	Often	Never	Never	Never	Never	Sometimes	Sometimes		JavaScript, C#, TypeScript	13 +		
7/2/2021 14:21:46	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Strongly agree	Agree	Disagree	Often	Rarely	Never	Never	Rarely	Never	Never	Rarely	Never	Rarely	Asynchronous calls to an external service either failing (unavailable) or WebHook updates coming back to a staging instance that updates the DB, but the timing of such events gets tricky.	Never	Often	Rarely	Rarely	Rarely	Rarely	Often	Sometimes		JavaScript, Python, Java, Swift	13 +		
7/2/2021 15:38:12	Yes, I consent.	Yes, I agree		Never	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Disagree	Never	Never	Never	Never	Never	Never	Never	Never	Never	Never		Rarely	Sometimes	Rarely	Sometimes	Sometimes	Sometimes	Often	Often		JavaScript, TypeScript	5 - 8		
7/2/2021 15:57:41	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Disagree	Never	Never	Rarely	Never	Often	Never	Never	Never	Never	Often	Our product makes schema changes to databases.  Our tests therefore spin up thousands of databases, making schema changes and tearing them down.  Unfortunately, while databases are designed to be very reliable at moving data around, they are slow and unreliable when making schema changes. Our test framework has a massive caching layer that effectively memoizes database schema changes. The cache is cleared every weekend, which occasionally exposes failures that were "masked" e.g. because a test assertion was changed while green. For probably too much info, see a talk from when the caching layer was built: https://www.youtube.com/watch?v=BqfMDJ56ihw	Often	Often	Sometimes	Sometimes	Rarely	Sometimes	Sometimes	Often	Clear the cache (see linked video above), rebuild one of the test SQL Server instances	C#	5 - 8	Like, how long do you have? I have some wacky views on unit vs integration testing that I could bore you with, but tbh I don't know how offtopic you want me to go here	
7/2/2021 15:58:37	Yes, I consent.	Yes, I agree		A few times a year	Agree	Strongly agree	Strongly agree	Agree	Strongly agree	Disagree	Agree	Agree	Sometimes	Never	Sometimes	Never	Never	Never	Rarely	Never	Never	Rarely		Never	Sometimes	Often	Never	Never	Never	Never	Often		JavaScript, Java, TypeScript	5 - 8		
7/2/2021 16:04:38	Yes, I consent.	Yes, I agree		Never	Strongly agree	Agree	Agree	Agree	Strongly agree	Agree	Strongly agree	Strongly agree	Never	Never	Rarely	Never	Rarely	Sometimes	Rarely	Never	Never	Never	Not off the top of my head.	Sometimes	Often	Sometimes	Sometimes	Never	Sometimes		Rarely	Moan :-)	JavaScript, PHP	13 +		
7/2/2021 16:20:36	Yes, I consent.	Yes, I agree		Weekly	Agree	Agree	Agree	Disagree	Agree	Agree	Agree	Agree	Rarely	Rarely	Sometimes	Sometimes	Rarely	Often	Sometimes	Never	Rarely	Sometimes		Rarely	Sometimes	Sometimes	Never	Never	Never	Never	Often		JavaScript, Python, TypeScript	2 - 4		
7/2/2021 16:57:21	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Agree	Agree	Strongly agree	Strongly agree	Agree	Agree	Agree	Rarely	Rarely	Never	Never	Never	Never	Rarely	Never	Never	Never									Often		JavaScript, TypeScript, Go	9 - 12		
7/2/2021 17:05:23	Yes, I consent.	Yes, I agree		Daily	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Strongly agree	Rarely	Sometimes	Sometimes	Sometimes	Often	Never	Never	Never	Never	Rarely	Errors in 3rd party libraries (e.g. Vagrant).  Not waiting long enough for an environment to be set up.  In UI tests, upgrading OS on an machine that runs them (e.g. Cortana's popup). Errors when simultaneously accessing the same resource (e.g. two tests fight for an exclusive lock on the SQL Server 'model' database to create a new database for tests).	Rarely	Often	Sometimes	Sometimes	Never	Never	Often	Often	Inform the team, look for a volunteer to fix.	C#, TypeScript	13 +		
7/2/2021 19:11:46	Yes, I consent.	Yes, I agree		A few times a year	Agree	Agree	Agree	Agree	Strongly agree	Agree	Agree	Disagree	Never	Never	Rarely	Never	Rarely	Never	Rarely	Never	Never	Never		Sometimes	Sometimes	Rarely	Sometimes	Rarely	Rarely	Never	Sometimes		JavaScript	13 +		
7/2/2021 19:15:19	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Agree	Agree	Agree	Agree	Agree	Agree	Disagree	Never	Rarely	Sometimes	Sometimes	Never	Never	Rarely	Never	Never	Rarely		Rarely	Sometimes	Often	Sometimes	Sometimes	Sometimes	Never	Often		Java	9 - 12		
7/2/2021 19:20:58	Yes, I consent.	Yes, I agree		Monthly	Strongly agree	Strongly agree	Agree	Strongly agree	Strongly agree	Strongly agree	Agree	Strongly agree	Never	Rarely	Never	Never	Rarely	Rarely	Rarely	Never	Never	Sometimes	Dependency on IO occuring within a time limit	Never	Sometimes	Rarely	Rarely	Never	Never	Never	Sometimes	Log the flaky for future action	TypeScript, Scala, Haskell	5 - 8		
7/2/2021 19:40:17	Yes, I consent.	Yes, I agree		Daily	Strongly agree	Strongly agree	Agree	Disagree	Strongly agree	Strongly agree	Disagree	Agree	Never	Never	Sometimes	Never	Often	Never	Never	Never	Never	Never	Flaky performance of the host system that can lead to failing timeouts	Sometimes	Often	Rarely	Never	Never	Never	Never	Sometimes		JavaScript, Java, TypeScript	2 - 4		
7/2/2021 19:43:08	Yes, I consent.	Yes, I agree		Daily	Agree	Agree	Strongly agree	Agree	Agree	Agree	Agree	Disagree	Never	Never	Never	Never	Often	Never	Never	Sometimes	Never	Sometimes	Test data changing (for end to end tests)	Sometimes	Often	Sometimes	Never	Never	Never	Sometimes	Sometimes		JavaScript, Scala, CoffeeScript	13 +		
7/2/2021 21:29:39	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Strongly agree	Sometimes	Never	Sometimes	Rarely	Rarely	Never	Never	Never	Never	Never		Rarely	Sometimes	Rarely	Sometimes	Rarely	Rarely	Never	Often		JavaScript, TypeScript	13 +		
7/2/2021 22:25:33	Yes, I consent.	Yes, I agree		Daily	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Disagree	Sometimes	Rarely	Sometimes	Rarely	Often	Rarely	Sometimes	Never	Rarely	Sometimes		Often	Often	Often	Sometimes	Rarely	Often	Never	Sometimes		JavaScript, C#, Go	13 +		
7/2/2021 22:35:34	Yes, I consent.	Yes, I agree		Daily	Strongly agree	Agree	Strongly agree	Agree	Agree	Agree	Disagree	Agree	Often	Sometimes	Sometimes	Never	Never	Never	Rarely	Never	Never	Rarely		Often	Often	Sometimes	Rarely	Never	Sometimes	Never	Sometimes		Haskell, Erlang	13 +		
7/2/2021 22:42:45	Yes, I consent.	Yes, I agree		Weekly	Agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Sometimes	Never	Sometimes	Never	Rarely	Often	Often	Rarely	Rarely	Sometimes	Tests which rely on integration with a 3rd party, and that external party might be very slow to respond, and the test does not wait long enough for the worst-case scenarios.	Never	Often	Sometimes	Never	Never	Rarely	Never	Often		Scala	13 +		
7/2/2021 22:56:05	Yes, I consent.	Yes, I agree		Daily	Agree	Strongly agree	Strongly agree	Disagree	Agree	Strongly agree	Agree	Disagree	Never	Never	Rarely	Never	Often	Rarely	Sometimes	Never	Never	Sometimes		Never	Often	Rarely	Never	Never	Never	Often	Sometimes		JavaScript, Elixir	5 - 8		
7/3/2021 0:43:15	Yes, I consent.				Disagree	Agree	Agree	Agree	Agree		Strongly agree	Disagree	Sometimes	Sometimes	Sometimes	Sometimes	Rarely		Sometimes	Sometimes		Sometimes		Sometimes	Often	Sometimes	Never	Sometimes	Sometimes	Sometimes	Often	warn other teams of existence of FT and the scope of risk	Python, C#, C++	13 +		
7/3/2021 2:06:56	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Never	Never	Never	Never	Never	Never	Never	Never	Sometimes	Never											Python, Scala, Haskell	2 - 4		
7/3/2021 5:37:47	Yes, I consent.	Yes, I agree		Daily	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Strongly agree	Rarely	Often	Often	Rarely	Often	Rarely	Often	Rarely	Sometimes	Often		Sometimes	Often	Sometimes	Rarely	Never	Never	Never	Sometimes		JavaScript, TypeScript, Go, Ruby, Swift	13 +	It’s often an organizational problem, where nobody owns shared resources, and prioritizing flaky tests across team boundaries without changing the code/features is hard.	
7/3/2021 6:00:45	Yes, I consent.	Yes, I agree		Monthly	Agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Rarely	Rarely	Sometimes	Rarely	Sometimes	Never	Often	Rarely	Rarely	Rarely	No	Sometimes	Often	Rarely	Rarely	Never	Sometimes	Never	Sometimes	No	Python, Java, Scala	13 +		
7/3/2021 6:18:25	Yes, I consent.	Yes, I agree		Monthly	Agree	Agree	Strongly agree	Agree	Strongly agree	Disagree	Agree	Agree	Sometimes	Rarely	Rarely	Rarely	Sometimes	Sometimes	Rarely	Never	Never		Complex e2e setups with 3rd party services (browswerstack) 	Sometimes	Often	Sometimes	Rarely	Never	Never	Often	Sometimes		JavaScript	13 +	They suck 	
7/3/2021 8:58:42	Yes, I consent.	Yes, I agree		Weekly	Disagree	Agree	Strongly agree	Agree	Disagree	Disagree	Strongly agree	Agree	Sometimes	Sometimes	Never	Rarely	Often	Never	Never	Never	Never	Rarely		Never	Often	Sometimes	Never	Rarely	Sometimes	Sometimes	Often		Java, TypeScript	5 - 8		
7/3/2021 15:08:27	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Agree	Agree	Strongly agree	Strongly agree	Agree	Agree	Agree	Sometimes	Never	Rarely	Rarely	Often	Never	Never	Never	Rarely	Rarely		Sometimes	Often	Sometimes	Sometimes	Never	Never	Never	Often		Go	2 - 4		
7/3/2021 15:42:08	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Agree	Strongly agree	Disagree	Strongly agree	Strongly disagree	Agree	Disagree	Never	Never	Never	Never	Never	Never	Often	Never	Never	Never		Rarely	Often	Never	Never	Never	Never	Never	Rarely		C#	0 - 1		
7/3/2021 16:27:56	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Disagree	Agree	Disagree	Often	Rarely	Often	Sometimes	Sometimes	Rarely	Rarely	Never	Rarely	Rarely		Rarely	Sometimes	Sometimes	Rarely	Rarely	Rarely	Sometimes	Often		Java	13 +		
7/3/2021 23:24:27	Yes, I consent.	Yes, I agree		Daily	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Rarely	Sometimes	Sometimes	Never	Never	Rarely	Rarely	Never	Never	Sometimes		Sometimes	Often	Rarely	Never	Never	Never	Never	Sometimes		Python, Swift	5 - 8	They're very annoying! I think my willingness to put up with them on my current project is a function of the general slowness of our build (thanks swift...) and CI pipeline - this means that we're already not getting as much value from CI as we could, and the flaky tests don't reduce that much more at the margin -- most of the time, we build confidence by running tests locally, and the team is small enough that integration isn't too painful. I'm sure this will change!	
7/4/2021 1:38:57	Yes, I consent.	No, I do not agree	I would say that a flaky test is any test that changes from pass to fail (or vice versa) in different environments.	Monthly	Strongly agree	Disagree	Disagree	Agree	Strongly agree	Agree	Disagree	Strongly disagree	Sometimes	Sometimes	Rarely	Rarely	Rarely	Rarely	Sometimes	Rarely	Often	Sometimes	Assuming that code behaves the same on a workstation as in CI wrt eg file system latency or concurrency	Rarely	Often	Sometimes	Sometimes	Never	Often	Never	Sometimes	Rewrite the code under test	JavaScript, Python, TypeScript, Kotlin, Swift, Haskell	13 +		
7/4/2021 1:46:31	Yes, I consent.	Yes, I agree		Weekly	Disagree	Agree	Agree	Disagree	Disagree	Agree	Agree	Disagree	Sometimes	Rarely	Sometimes	Rarely	Rarely	Never	Sometimes		Sometimes	Rarely		Sometimes	Sometimes	Rarely	Never	Never	Never	Never	Sometimes	We wrote something to skip a test for a month to give us time to look at it. After a month it will start to fail.	Swift	5 - 8		
7/4/2021 2:19:53	Yes, I consent.	Yes, I agree		Monthly	Agree	Agree	Agree	Disagree	Strongly agree	Strongly agree	Agree	Disagree	Sometimes	Often	Rarely	Never	Never	Never	Rarely	Never	Never	Rarely	A big one for “synchronisation” is when instrumenting an external program (selenium and chrome in particular) , lots of async stuff going on there	Sometimes	Often	Rarely	Never	Rarely	Never	Sometimes	Sometimes		JavaScript, Python	5 - 8		
7/4/2021 10:48:48	Yes, I consent.	Yes, I agree		Daily	Agree	Strongly agree	Agree	Disagree	Agree	Strongly agree	Agree	Agree	Sometimes	Never	Rarely	Never	Sometimes	Never	Never	Never	Never	Never	As someone who writes front-end code, I’ve had many moments where tests are flaky because of random quirks in how Selenium works and it ignoring the elements I want it to interact with	Sometimes	Often	Rarely	Never	Never	Never	Often	Rarely	I generally run the tests two or three times before diving into the logs to see what’s going wrong 	JavaScript, TypeScript	0 - 1		
7/5/2021 13:00:55	Yes, I consent.	No, I do not agree	I'd say that the test is flaky if it does not have the clarity to clearly identify problems.  That said, if the code is written in a way that gives unreliable results then the test itself is flaky	A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly disagree	Agree	Strongly disagree	Strongly agree	Strongly disagree	Rarely	Sometimes	Sometimes	Rarely	Never	Rarely	Rarely	Rarely	Rarely	Often	Poor test specification and lack of understanding of the production environment	Rarely	Sometimes	Often	Rarely	Rarely	Never	Rarely	Rarely	review test specification		13 +	Caused by poor quality of coding and poor test specification coupled with a lack of understanding of the environment	
7/5/2021 13:16:03	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Disagree	Agree	Rarely	Often	Often	Rarely	Rarely	Never	Rarely	Never	Never	Never		Never	Often	Rarely	Rarely	Never	Never	Never	Often		C#	13 +		
7/6/2021 4:45:25	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Disagree	Never	Never	Often	Never	Sometimes	Never	Rarely	Never	Never	Rarely	incompatibilities between technologies - Java JPA date objects and SQL Server timestamp fields. After saving to db, milliseconds comes back slightly varied from what is entered for saving.	Rarely	Often	Never	Rarely	Rarely	Never	Never	Sometimes		JavaScript, Java	5 - 8	Date handling is the worse thing I have ever had to program around and tests dealing with it are 10 times more difficult than the already difficult code.	
7/6/2021 4:46:39	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Never	Rarely	Sometimes	Never	Sometimes	Rarely	Rarely	Never	Never	Sometimes	Dependency on external data.  Hardware performance changes.  External library instabilities.	Rarely	Often	Sometimes	Rarely	Rarely	Never	Never	Often		Python, C#, C++	13 +		
7/6/2021 14:39:45	Yes, I consent.	Yes, I agree		Monthly	Strongly agree	Agree	Strongly agree	Disagree	Agree	Disagree	Strongly agree	Disagree	Often	Rarely	Never	Never	Never	Never	Rarely	Never	Never	Rarely	Race conditions in distributed protocols - i.e., not threads modifying shared memory unsafely, but race conditions in processes passing messages	Never	Often	Rarely	Never	Never	Sometimes	Never	Often		Python, Java, C++, C, System Verilog	5 - 8		
7/6/2021 20:07:49	Yes, I consent.	Yes, I agree		Daily	Strongly agree	Agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Strongly disagree	Sometimes	Rarely	Often	Never	Often	Rarely	Sometimes	Never	Never	Often		Often	Often	Often	Never	Never	Never	Never	Rarely		C#	5 - 8		
7/6/2021 20:28:04	Yes, I consent.	Yes, I agree		Daily	Agree	Strongly agree		Disagree	Agree	Strongly agree	Disagree	Disagree	Never	Often	Sometimes	Rarely	Often	Never	Never	Never	Rarely	Rarely	One thing you might be missing is tests that are inherently flaky: for example, Terraform's providers run against entire clouds, so stuff is just going to fail, because Internet. It requires a great deal of context to know which tests are okay to be failing, based on past experience and knowledge of the underlying code and tests. There are tools for that, but they're not evenly available and usable across CI platforms.	Sometimes	Often	Sometimes	Rarely	Rarely	Rarely	Sometimes	Often		JavaScript, Go, Ruby	13 +	Just to expand your scope to include fuller integration and system tests, which may have different failure profiles.	
7/6/2021 21:07:26	Yes, I consent.	Yes, I agree		A few times a year	Disagree	Agree	Disagree	Agree	Disagree	Agree	Agree	Agree	Often	Often	Often	Never	Sometimes	Never	Sometimes	Never	Never	Sometimes	Related to “cleanup or setup” above: interleaved execution order of setup & test code, e.g. some setup code runs when files A & B are loaded, and then the tests in each file are run. This typically happens for us when we neglect to put all setup code in a ‘before’ block using the mocha test runner.	Sometimes	Sometimes	Rarely	Rarely	Rarely	Sometimes	Often	Sometimes		JavaScript, Ruby	13 +		
7/6/2021 21:09:15	Yes, I consent.	Yes, I agree		A few times a year	Agree	Agree	Strongly agree	Agree	Strongly agree	Agree	Strongly agree	Disagree	Rarely	Rarely	Sometimes	Never	Often	Rarely	Never	Never	Never	Sometimes		Rarely	Often	Rarely	Rarely	Rarely	Never	Often	Often		JavaScript, Java, C++, Crystal	2 - 4		
7/6/2021 22:11:05	Yes, I consent.	Yes, I agree		A few times a year	Agree	Disagree	Disagree	Disagree	Agree	Strongly disagree	Strongly agree	Agree	Rarely	Rarely	Sometimes	Sometimes	Sometimes	Never	Rarely	Sometimes	Never	Rarely		Rarely	Often	Sometimes	Never	Never	Rarely	Rarely	Often		Java, C++, C	13 +		
7/6/2021 22:49:01	Yes, I consent.	Yes, I agree		Weekly	Agree	Strongly agree	Strongly agree	Agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Rarely	Never	Sometimes	Never	Never	Never	Never	Never	Never	Never	Hardware performance not consistent with time outs. 	Never	Often	Sometimes	Rarely	Often	Rarely	Never	Often	Reorder tests in case they are order-dependent. 	JavaScript	2 - 4	They’re no fun :(	
7/7/2021 20:20:03	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Sometimes	Sometimes	Never	Sometimes	Sometimes	Sometimes	Often	Rarely	Rarely	Sometimes		Often	Often	Rarely	Rarely	Rarely	Often	Rarely	Often		JavaScript, Python, Java, PHP, Go, Ruby	13 +		
7/8/2021 19:50:16	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Disagree	Agree	Sometimes	Sometimes	Often	Often	Never	Rarely	Often	Rarely	Sometimes	Rarely		Never	Sometimes	Sometimes	Sometimes	Sometimes	Rarely	Never	Often	Rewrite problematic code to make it more testable.	JavaScript, TypeScript	13 +	Usually they indicate a code smell somewhere, whether that be issues with the applications architecture/implementation/testability or issues with the tests, testing strategies. I tend to come across flaky tests more in end to end tests or poorly encapsulated/tightly coupled code.	
7/10/2021 20:06:47	Yes, I consent.	Yes, I agree		A few times a year	Disagree	Disagree	Disagree	Strongly disagree	Agree	Agree	Agree	Disagree	Never	Rarely	Sometimes	Sometimes	Sometimes	Never	Rarely	Rarely	Rarely	Sometimes		Never	Sometimes	Sometimes	Never	Never	Never	Never	Often		Java, C++, C	13 +		
7/11/2021 11:35:12	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Strongly agree	Often	Sometimes	Sometimes	Sometimes	Often	Rarely	Sometimes	Rarely	Sometimes	Often		Never	Sometimes	Often	Rarely	Never	Sometimes	Never	Sometimes		Swift	2 - 4		
7/11/2021 11:43:57	Yes, I consent.	No, I do not agree	I think it’s broader than that and includes things like tests that pass independent of conditions	Monthly	Strongly agree	Agree	Agree	Strongly agree	Disagree	Strongly agree	Agree	Agree	Sometimes	Often	Often	Sometimes	Often	Often	Sometimes	Rarely	Sometimes	Sometimes	Saw one set of tests for a database that got 15% pass rate even if the database was not loaded	Rarely	Often	Sometimes	Sometimes	Rarely	Often	Rarely	Sometimes	Look disappointed at the next meeting where I’m told how great our testing is?	Python, Java, TypeScript, C++, Go, Swift, Objective-C	13 +		
7/11/2021 11:49:50	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Disagree	Sometimes	Sometimes	Often	Rarely	Rarely	Sometimes	Sometimes	Never	Sometimes	Sometimes			Often	Often	Sometimes	Often	Sometimes	Often	Often		JavaScript, Java	13 +	We're putting in a concerted effort to change the culture of flaky tests, so that developers and release managers can have more confidence in CI, and move towards true CD	
7/11/2021 11:56:53	Yes, I consent.	Yes, I agree		Monthly	Agree	Strongly agree	Agree	Disagree		Agree	Agree	Agree	Never	Sometimes	Rarely	Never	Rarely	Never	Never	Never	Never	Rarely		Sometimes	Often	Sometimes	Sometimes	Sometimes	Sometimes	Sometimes	Often		Python, Java, C++, C, Perl	13 +		
7/11/2021 12:20:20	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Never	Rarely	Rarely	Rarely	Rarely	Never	Sometimes	Sometimes	Sometimes	Often		Rarely	Sometimes	Rarely	Often	Rarely	Never	Never	Often		C	13 +		
7/11/2021 12:31:48	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Disagree	Disagree	Strongly agree	Strongly agree	Disagree	Strongly agree	Disagree	Rarely	Sometimes	Never	Never	Never	Never	Sometimes	Never	Never	Often	UTC date rollover	Often	Often	Often	Rarely	Sometimes	Sometimes	Never	Often	Recreate/move testing environment and retest	JavaScript, Ruby, Perl	13 +	Johari window is a relevant concept	
7/11/2021 12:34:50	Yes, I consent.	Yes, I agree		Monthly	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Strongly agree	Agree	Never	Sometimes	Often	Often	Never	Rarely	Sometimes	Never	Never	Never		Often	Often	Never	Rarely	Never	Never	Never	Rarely		JavaScript, C#, TypeScript	2 - 4	If I were to identify one as part of a PR, I would not accept it until after it was fixed or removed. Unfortunately, due to the flakiness they aren't identified until some time after they have been accepted into the main branch	
7/11/2021 12:53:57	Yes, I consent.	Yes, I agree		Monthly	Strongly agree	Strongly agree	Agree	Agree	Strongly agree	Agree	Strongly agree	Disagree	Sometimes	Sometimes	Often	Often	Rarely	Sometimes	Often	Rarely	Rarely	Never		Sometimes	Often	Never	Never	Rarely	Rarely	Never	Sometimes		Scala	13 +		
7/11/2021 13:19:37	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Agree	Strongly agree	Disagree	Agree	Strongly disagree	Never	Never	Never	Never	Never	Never	Sometimes	Never	Never	Never		Rarely	Never	Rarely	Never	Never	Never	Never	Often		JavaScript, C#	13 +		
7/11/2021 13:32:39	Yes, I consent.	Yes, I agree		Monthly	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Disagree	Agree	Sometimes	Sometimes	Sometimes	Rarely	Often	Never	Sometimes	Never	Rarely	Never		Never	Often	Sometimes	Rarely	Sometimes	Rarely	Never	Sometimes		JavaScript, Python, C, Go, Ruby	13 +		
7/11/2021 13:46:14	Yes, I consent.	Yes, I agree		A few times a year	Strongly disagree	Strongly agree	Disagree	Strongly disagree	Strongly agree	Agree	Disagree	Disagree	Never	Never	Sometimes	Often	Sometimes	Sometimes	Rarely	Never	Often	Rarely			Sometimes	Sometimes	Never	Sometimes	Sometimes	Never	Sometimes	The aim is to repair and remove the flakiness but sometimes this gets deferred and we just ‘put up with it’ far longer than we should. That we can do this for an extended period is probably more an indication that our continuous integration game is not as sophisticated as it should be.	JavaScript, Python, Swift	13 +	All bar one of our flaky tests are due to inexperienced developers and their assumptions. The one that wasn’t was resource cleanup that wasn’t being done in a corner case (when other flaky tests caused crashes!) that I had been too lazy to fix.	
7/11/2021 14:24:59	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Agree	Never	Never	Rarely	Never	Rarely	Rarely	Never	Never	Sometimes	Sometimes		Rarely	Sometimes	Rarely	Never	Never	Never	Never	Sometimes		Python, Java	5 - 8		
7/11/2021 14:29:10	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Agree	Agree	Strongly agree	Strongly agree	Agree	Agree	Disagree	Often	Rarely	Sometimes	Rarely	Often	Rarely	Never	Never	Rarely	Rarely		Sometimes	Often	Often	Sometimes	Sometimes	Often	Rarely	Sometimes		JavaScript, TypeScript	13 +		
7/11/2021 14:29:13	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Rarely	Never	Sometimes	Never	Sometimes	Never	Never	Never	Never	Sometimes		Rarely	Often	Rarely	Rarely	Sometimes	Never	Sometimes	Sometimes		JavaScript, Python, TypeScript, Swift	13 +		
7/11/2021 14:32:45	Yes, I consent.	Yes, I agree		Weekly	Agree	Agree	Disagree	Agree	Agree	Disagree	Strongly agree	Strongly agree	Never	Never	Never	Never	Often	Rarely	Rarely	Never	Rarely	Sometimes		Sometimes	Rarely	Rarely	Never	Sometimes	Sometimes	Sometimes	Rarely		Python	9 - 12		
7/11/2021 15:02:38	No, I do not consent.																																			
7/11/2021 15:02:45	Yes, I consent.	Yes, I agree		Weekly	Disagree	Agree	Strongly agree	Strongly disagree	Strongly agree	Agree	Disagree	Disagree	Rarely	Rarely	Sometimes	Rarely	Sometimes	Never	Rarely	Sometimes	Rarely	Sometimes	Ci system taking too long to begin tests causing step to timeout 	Never	Often	Often	Rarely	Rarely	Rarely	Never	Sometimes	Check against list of known flaky tests	C, Swift, Objective-C	9 - 12		
7/11/2021 16:02:07	Yes, I consent.	Yes, I agree		Weekly	Agree	Strongly agree	Strongly agree	Agree	Strongly agree	Agree	Agree	Disagree	Sometimes	Sometimes	Often	Often	Rarely	Never	Rarely	Never	Rarely	Often		Sometimes	Often	Sometimes	Rarely	Sometimes	Sometimes	Never	Sometimes		Python	5 - 8		
7/11/2021 16:37:31	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Agree	Agree	Strongly agree	Strongly agree	Strongly agree	Agree	Disagree	Never	Rarely	Sometimes	Sometimes	Never	Rarely	Never	Rarely	Never	Never	Resource availability (e.g. tests use a lot of memory, usually the test machine can handle it, sometimes it can't); similarly, tests at or near time-out limits; effect of other services on the machine and updates to them, e.g. anti-virus and similar intrusive services	Rarely	Sometimes	Often	Rarely	Sometimes	Rarely	Never	Often		Python	13 +	flaky tests can be valuable as they often point to an underlying weakness in the codebase (including third-party) in how resources, threading, etc are managed.   Diagnosing and fixing this can be a very worthwhile activity.  flaky tests are also a good warning sign that the code is so complex that the developers have lost control over its design and behavior.	
7/11/2021 17:35:38	Yes, I consent.	Yes, I agree		Monthly	Agree	Disagree	Strongly disagree	Strongly disagree	Strongly agree	Disagree	Disagree	Disagree	Often	Never	Never	Never	Never	Never	Never	Never	Rarely	Rarely		Sometimes	Often	Sometimes	Never	Never	Rarely	Often	Often		JavaScript, Python	9 - 12		
7/11/2021 17:38:30	Yes, I consent.	Yes, I agree		Daily	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Disagree	Disagree	Often	Never	Sometimes	Never	Sometimes	Rarely	Often	Rarely	Often	Rarely		Sometimes	Sometimes	Often	Never	Never	Often	Rarely	Sometimes		JavaScript, Ruby	9 - 12		
7/11/2021 23:03:21	Yes, I consent.	Yes, I agree		A few times a year	Agree	Agree	Agree	Agree	Agree	Disagree	Disagree	Strongly disagree	Often	Rarely	Sometimes	Rarely	Never	Rarely	Rarely		Rarely	Rarely	Using "eventually consistent" databases	Rarely	Sometimes	Sometimes	Never	Sometimes	Rarely	Never	Often		JavaScript, Python, Java	13 +		
7/12/2021 0:49:05	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Agree	Disagree	Agree	Agree	Disagree	Agree	Disagree	Rarely	Never	Rarely	Never	Sometimes	Never	Rarely	Never	Never	Never		Never	Sometimes	Often	Never	Rarely	Rarely	Never	Often		JavaScript, Python	9 - 12		
7/13/2021 11:06:02	Yes, I consent.	Yes, I agree		A few times a year	Agree	Agree	Agree	Agree	Strongly agree	Agree	Strongly agree	Strongly agree	Sometimes	Never	Sometimes	Never	Rarely	Never	Never	Rarely	Never	Never		Sometimes	Often	Sometimes	Never	Rarely	Rarely	Never	Often		JavaScript, Java, TypeScript, Kotlin	13 +		
7/13/2021 11:41:28	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Agree	Strongly agree	Strongly agree	Strongly agree	Agree	Strongly agree	Never	Never	Often	Never	Never	Never	Never	Never	Often	Never			Often						Often		Python, C#	13 +		
7/13/2021 11:45:45	Yes, I consent.	Yes, I agree		A few times a year	Disagree	Agree	Strongly agree	Disagree	Strongly agree	Agree	Strongly agree	Agree	Never	Sometimes	Sometimes	Never	Never	Rarely	Rarely	Never	Never	Sometimes		Rarely	Often	Rarely	Never	Never	Never	Never	Sometimes		JavaScript, Python	9 - 12		
7/13/2021 12:13:58	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Agree	Agree	Strongly agree	Strongly agree	Agree	Strongly agree	Rarely	Never	Rarely	Never	Never	Never	Rarely	Never	Never	Never		Never	Often	Sometimes	Never	Never	Never	Never	Often		JavaScript, TypeScript, Kotlin, Ruby	13 +	Often the hardest part is getting developer & product buy-in to fix them – there's a perception that they're hard to fix and can be time-sink.	
7/13/2021 12:21:42	Yes, I consent.	Yes, I agree		Weekly	Agree	Agree	Strongly agree	Agree	Disagree	Agree	Agree	Agree	Never	Rarely	Sometimes	Sometimes	Never	Never	Never	Never	Never	Sometimes			Often	Sometimes				Rarely	Often		Python	5 - 8		
7/14/2021 14:49:46	Yes, I consent.	Yes, I agree		Monthly	Strongly agree	Agree	Agree	Agree	Agree	Agree	Agree	Agree	Rarely	Rarely	Sometimes	Rarely	Rarely	Sometimes	Rarely	Never	Never	Rarely		Rarely	Often	Sometimes	Rarely	Never	Sometimes	Never	Often		JavaScript, TypeScript	0 - 1		
7/14/2021 19:48:29	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Disagree	Disagree	Agree	Sometimes	Rarely	Sometimes	Sometimes	Often	Sometimes	Never	Never	Sometimes	Never		Often	Sometimes	Rarely	Never	Never	Sometimes	Never	Sometimes		Java	13 +		
7/14/2021 19:54:22	Yes, I consent.	Yes, I agree		A few times a year	Agree	Agree	Agree	Agree	Agree	Agree	Agree	Disagree	Rarely	Rarely	Sometimes	Sometimes	Sometimes	Often	Rarely	Rarely	Rarely	Rarely			Often	Sometimes	Sometimes	Rarely	Sometimes	Rarely	Often		JavaScript, Java	9 - 12		
7/15/2021 11:47:12	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Never	Often	Sometimes	Never	Rarely	Never	Sometimes	Never	Often	Sometimes		Often	Often	Sometimes	Rarely	Rarely	Rarely	Never	Often		Java	13 +		
7/15/2021 13:58:58	Yes, I consent.	Yes, I agree	Mostly agree however sometimes define a test that only fails on CI to be flakey as well	Weekly	Agree	Strongly agree	Agree	Agree	Strongly agree	Disagree	Agree	Disagree	Sometimes	Rarely	Rarely	Rarely	Rarely	Rarely	Sometimes	Rarely	Sometimes	Often	UI not being in the expected state. Ie keyboard not closed, or animations not completed when checking results	Sometimes	Often	Sometimes	Rarely	Rarely	Sometimes	Never	Sometimes		Kotlin, Swift	9 - 12		
7/15/2021 14:04:07	Yes, I consent.	Yes, I agree		Weekly	Agree	Agree	Agree	Agree	Agree	Disagree	Agree	Agree	Rarely	Never	Rarely	Never	Never	Never	Rarely	Never	Never	Sometimes	Docker VMs failing for no apparent reason.  I.e. a chain of services shutting down resulting in iis being shut down, bearing the test environment. 	Often	Often	Rarely	Rarely	Sometimes	Sometimes	Never	Rarely	Moan about the component tests being flakey in our febrile discussion channels. 	C#	13 +	A stable CI system is essential for productive development at scale. 	
7/15/2021 23:22:25	Yes, I consent.	Yes, I agree		A few times a year	Agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Disagree	Agree	Disagree	Never	Never	Rarely	Never	Sometimes	Never	Sometimes	Rarely	Sometimes	Sometimes	Assumptions about undocumented/unspecified behavior of a library that is broken by a subsequent version.	Rarely	Sometimes	Sometimes	Rarely	Sometimes	Rarely	Rarely	Often	Sometimes mocking a dependency can fix the problem.	Java, Go, Rust	5 - 8		
7/15/2021 23:46:30	Yes, I consent.	Yes, I agree		Monthly	Agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Sometimes	Sometimes	Rarely	Never	Often	Never	Never	Rarely	Sometimes	Often		Rarely	Sometimes	Often	Never	Rarely	Often	Never	Often		JavaScript, PHP, Zig	13 +		
7/19/2021 14:54:48	Yes, I consent.	Yes, I agree		Daily	Strongly agree	Agree	Agree	Strongly agree	Strongly agree	Agree	Disagree	Disagree	Rarely	Often	Sometimes	Often	Sometimes	Rarely	Sometimes	Rarely	Rarely	Rarely	Hardware dependency might play a role.	Rarely	Often	Never	Rarely	Sometimes	Rarely	Never	Never		Python, C++, C, bash	2 - 4		
7/19/2021 15:42:33	Yes, I consent.	Yes, I agree		Monthly	Disagree	Agree	Strongly agree	Strongly agree	Agree	Agree	Agree	Agree	Often	Sometimes	Sometimes	Rarely	Sometimes	Never	Rarely	Never	Never	Rarely	no	Never	Often	Often	Rarely	Rarely	Never	Never	Sometimes	no	Python, Java	0 - 1	no	
7/19/2021 18:42:16	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Often	Often	Rarely	Rarely	Sometimes	Never	Never	Never	Rarely	Rarely		Never	Often	Sometimes	Sometimes	Sometimes	Sometimes	Never	Often		JavaScript, Python, PHP, Swift, Scala	2 - 4		
7/20/2021 10:42:26	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Rarely	Rarely	Never	Never	Sometimes	Never	Sometimes	Sometimes	Rarely	Rarely		Sometimes	Often	Sometimes	Rarely	Rarely	Rarely	Rarely	Often		JavaScript, Java	13 +	its always the way you test wich is the problem	
7/20/2021 11:54:14	Yes, I consent.	No, I do not agree	A flaky test is a test run against code which produces different results each time. Ideally code with a set of inputs will output the same result each time. So if it fails with a set of inputs, either the fail will be reproduced each time or there will be a very valid reason for the output passing due to the SAME inputs being used. A flaky test is therefore either unreliable itself or it proves the code under test is flawed and unreliable.	A few times a year	Disagree	Disagree	Disagree	Disagree	Disagree	Agree	Agree	Strongly agree	Sometimes	Sometimes	Sometimes	Sometimes	Rarely	Sometimes	Rarely	Sometimes	Rarely	Sometimes	Changes in hardware that the code and tests are running on	Rarely	Often	Often	Rarely	Rarely	Never	Rarely	Often		JavaScript, Java, PHP, C, Ruby, Swift, Objective-C, Actionscript 3	13 +		
7/20/2021 22:51:28	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Often	Rarely	Sometimes	Rarely	Rarely	Never	Often	Never	Rarely		ordering of test execution; hidden dependencies between tests.	Rarely	Often	Sometimes	Rarely	Never	Rarely	Rarely	Sometimes		JavaScript, Java, Go	5 - 8		
7/20/2021 23:55:34	Yes, I consent.	Yes, I agree		A few times a year	Agree	Strongly agree	Strongly agree	Agree	Strongly agree	Agree	Strongly agree	Disagree	Sometimes	Sometimes	Often	Often	Rarely	Never	Never	Never	Never	Rarely		Rarely	Often	Sometimes	Never	Never	Never	Never	Often		Go	13 +		
7/22/2021 14:55:56	Yes, I consent.	Yes, I agree		Monthly	Strongly agree	Agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Sometimes	Rarely	Often	Sometimes	Rarely	Sometimes	Often	Never	Rarely	Often		Rarely	Often	Often	Sometimes	Sometimes	Rarely	Rarely	Often		JavaScript, TypeScript, Ruby, Rust, Elixir	9 - 12		
7/22/2021 15:53:20	Yes, I consent.	Yes, I agree		A few times a year	Agree	Agree	Strongly agree	Disagree	Agree	Agree	Agree	Strongly agree	Sometimes	Sometimes	Sometimes	Rarely	Sometimes	Sometimes	Often	Sometimes	Sometimes	Sometimes		Never	Often	Sometimes	Rarely	Sometimes	Sometimes	Rarely	Often		Ruby	13 +		
7/22/2021 17:37:28	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Agree	Strongly agree	Strongly agree	Strongly agree	Agree	Disagree	Disagree	Sometimes	Rarely	Sometimes	Never	Rarely	Rarely	Never	Sometimes	Often	Rarely		Never	Often	Sometimes	Often	Never	Never	Never	Often		JavaScript, Ruby	13 +		
7/22/2021 18:11:46	Yes, I consent.	Yes, I agree		Weekly	Agree	Agree	Agree	Disagree	Agree	Strongly agree	Disagree	Disagree	Never	Never	Often	Sometimes	Never	Never	Never	Never	Never	Rarely		Rarely	Often	Sometimes	Never	Never	Never	Never	Rarely		Ruby	13 +		
7/24/2021 7:43:33	Yes, I consent.	Yes, I agree		Weekly	Strongly agree	Strongly agree	Strongly agree	Agree	Strongly agree	Strongly agree	Agree	Disagree	Often	Rarely	Rarely	Never	Often	Never	Rarely	Never	Never	Often	This may simply be an extension of 'asynchronous calls' but when running integration tests on a webpage, the test would often find an element too 'early', but then fail because it becomes detached from the DOM while the page is still loading. 	Rarely	Often	Rarely	Never	Rarely	Never	Sometimes	Often		JavaScript, C#, TypeScript	0 - 1	It always seems like the more of the system you test (with integration/e2e tests) the more flaky the tests are going to be. On my current project we started with the assumption we could also test our backend processes but quickly realised that could not be relied upon and tests were incredibly flaky. We ended up with tests that stub out the network requests to fake the behaviour of the backend, only testing our frontend Typescript/Javascript + HTML/CSS templates. 	
7/26/2021 10:34:33	Yes, I consent.	Yes, I agree		Monthly	Disagree	Agree	Agree	Agree	Strongly agree	Disagree	Agree	Agree	Sometimes	Rarely	Never	Rarely	Sometimes	Sometimes	Sometimes	Rarely	Sometimes	Sometimes		Never	Sometimes	Often	Rarely	Often	Rarely	Never	Sometimes		JavaScript, Ruby, Rust	5 - 8		
8/2/2021 21:25:28	Yes, I consent.	Yes, I agree		Monthly	Strongly agree	Strongly agree	Agree	Strongly agree	Strongly agree	Strongly agree	Agree	Disagree	Sometimes	Sometimes	Often	Often	Often	Rarely	Often	Never	Sometimes	Often		Rarely	Often	Sometimes	Never	Rarely	Rarely	Rarely	Often		Go	5 - 8		
8/13/2021 20:09:56	Yes, I consent.	Yes, I agree		Monthly	Disagree	Disagree	Agree	Disagree	Strongly agree	Disagree	Agree	Agree	Rarely	Sometimes	Sometimes	Sometimes	Never	Sometimes	Rarely	Rarely	Rarely	Never		Never	Sometimes	Rarely	Never	Never	Never	Never	Often		JavaScript, Java, TypeScript	9 - 12		
9/14/2021 17:38:50	Yes, I consent.	Yes, I agree		A few times a year	Strongly agree	Strongly agree	Agree	Strongly agree	Strongly agree	Disagree	Agree	Agree	Rarely	Sometimes	Often	Never	Sometimes	Never	Often	Never	Rarely	Rarely		Never	Often	Sometimes	Rarely	Never	Never	Never	Sometimes		JavaScript, Python	9 - 12		
9/14/2021 23:00:06	Yes, I consent.	Yes, I agree		A few times a year	Agree	Agree	Strongly agree	Agree	Disagree	Disagree	Agree	Agree	Never	Rarely	Rarely	Never	Never	Sometimes	Never	Never	Never	Never	global variables :(	Rarely	Never	Rarely	Sometimes	Never	Never	Rarely	Sometimes		JavaScript, C#, TypeScript, Visual Basic, MUMPS	9 - 12		
9/16/2021 12:11:12	Yes, I consent.	Yes, I agree		Daily	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Disagree	Agree	Often	Often	Often	Never	Never	Never	Rarely	Never	Rarely	Sometimes		Sometimes	Often	Sometimes	Rarely	Never	Never	Sometimes	Sometimes		JavaScript, Java	13 +		
9/16/2021 14:22:08	Yes, I consent.	Yes, I agree		Daily	Strongly agree	Strongly agree	Strongly agree	Strongly agree	Agree	Agree	Agree	Disagree	Often	Never	Never	Never	Sometimes	Never	Never	Never	Never	Sometimes		Rarely	Often	Often	Never	Never	Often	Often	Often		JavaScript	9 - 12	We have built a huge system along our CI which tracks all test runs, monitors flake rates, automatically re-runs failures, and ignores failures once a test has been tagged as flaky.  Weekly reports go out whenever a test flakes often enough. This system helps immensely, but has taken years to mature and lots of money to build.	
9/17/2021 8:32:46	Yes, I consent.	Yes, I agree		Monthly	Strongly agree	Agree	Agree	Strongly agree	Strongly agree	Disagree	Disagree	Disagree	Rarely	Never	Rarely	Never	Never	Rarely	Sometimes	Never	Often	Rarely	Probably, but nothing specific comes to mind at this moment	Never	Often	Often	Never	Never	Rarely	Never	Sometimes	Nope	Elixir	2 - 4		
9/24/2021 3:33:05	Yes, I consent.	Yes, I agree		Monthly	Agree	Strongly agree	Strongly agree	Disagree	Strongly agree	Disagree	Agree	Strongly agree	Never	Never	Never	Never	Rarely	Never	Never	Never	Never	Sometimes	integration with external systems	Sometimes	Often	Rarely	Rarely	Never	Rarely	Never	Often		Python, C++, GCL	13 +	positively hate them, but some things aren't deterministic by nature	
